# Countershub Project Overview

## 🌌 Vision
Countershub is a **fan-made Star Wars: Galaxy of Heroes (SWGOH) counter hub**.  
The goal: provide the community with a faster, cleaner, and more reliable counter tool than current options like SWGOH.gg.  

### Principles
- **Mobile-first**: Easy to use mid-battle.  
- **Simple by default**: Just Target → Counter → Difficulty → Proof.  
- **Advanced if desired**: Optional settings for deeper filtering.  
- **Community-driven**: Feedback, votes, and proof integration.  

---

## 🎯 Core Features
- **Game Modes**: Counters for GAC, TW, and Fleets.  
- **Filters**: Omicron (Omi) and Datacron (DC) toggles.  
- **Difficulty Pills**: Visual difficulty indicator (safe / warn / danger).  
- **Proof Links**: Video or text proof for reliability.  
- **YouTube Fallback**: If JSON proof is missing, fetch live YouTube results.  
- **Advanced Settings** (toggle):
  - Budget-only counters  
  - GL-required counters  
  - Proof-required counters  
  - YouTube fallback toggle  
- **Voting System**: 👍 👎 for community reliability ranking.  
- **Search Page**: Query across all counters.  
- **Legal Disclaimer Page**: Fan-made, not affiliated with EA/CG/Disney/Lucasfilm.  

---

## 🛠️ Implementation Steps

### 1. Data Backbone
- JSON files: `gac.json`, `tw.json`, `fleets.json`.  
- Each entry contains:
  ```json
  {
    "target": "Enemy Team",
    "counter": ["Your Team"],
    "difficulty": 5,
    "omi": true,
    "dc": false,
    "proof": "https://youtube.com/...",
    "notes": "Extra strategy tips."
  }
  ```
- `README_DATA.md` explains schema for contributors.

### 2. Next.js App Structure
- `app/` directory (App Router).  
- Pages: home, GAC, TW, Fleets, Search, Legal Disclaimer.  
- `layout.jsx` → global wrapper + nav.  
- `globals.css` → dark neon theme.  

### 3. ModeView Component
- Displays counters in cards.  
- Toggles for Omi/DC filters.  
- Advanced Settings panel.  
- Integrated YouTube fallback video fetching.  
- Local voting buttons.  

### 4. YouTube Integration
- API route: `app/api/youtube/route.js`.  
- Logic: `lib/youtubeFetcher.js`.  
- Fetches top relevant videos securely using server-side API key.  
- Users toggle fallback in Advanced Settings.

### 5. Deployment
- Hosted on **Vercel**.  
- Secure API key in `.env.local` → `YOUTUBE_API_KEY=your_api_key_here`.  
- `.gitignore` prevents secrets, `node_modules/`, and build output from leaking.  

---

## ✅ Current Status
- TypeScript removed — repo runs in plain JavaScript.  
- Advanced features functional.  
- JSON data validated.  
- Project ready to push to GitHub and deploy on Vercel.  

---

## 🚀 Next Steps
1. Upload project to GitHub.  
2. Connect repo to Vercel.  
3. Add `YOUTUBE_API_KEY` in Vercel Environment Variables.  
4. Deploy and test fallback videos + filters live.  
